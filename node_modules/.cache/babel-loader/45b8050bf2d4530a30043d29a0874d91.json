{"ast":null,"code":"import _classCallCheck from \"D:\\\\work\\\\vscode-workspace\\\\zy-home\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\work\\\\vscode-workspace\\\\zy-home\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\work\\\\vscode-workspace\\\\zy-home\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\work\\\\vscode-workspace\\\\zy-home\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\work\\\\vscode-workspace\\\\zy-home\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\work\\\\vscode-workspace\\\\zy-home\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\work\\\\vscode-workspace\\\\zy-home\\\\src\\\\zyhome\\\\page\\\\components\\\\Pagecomponent.js\";\n\n/**\n * Created By brand On 2018/2/2\n */\nimport React, { Component } from 'react';\nimport './Pagecomponent.css';\n\nvar Pagecomponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Pagecomponent, _Component);\n\n  function Pagecomponent(props) {\n    var _this;\n\n    _classCallCheck(this, Pagecomponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Pagecomponent).call(this, props));\n    _this.state = {\n      currentPage: 1,\n      //当前页码\n      groupCount: 5,\n      //页码分组，显示7个页码，其余用省略号显示\n      startPage: 1,\n      //分组开始页码\n      totalPage: 1 //总页数\n\n    };\n    _this.createPage = _this.createPage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Pagecomponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        totalPage: this.props.pageConfig.totalPage\n      });\n      this.props.pageCallbackFn(this.state.currentPage);\n    }\n  }, {\n    key: \"createPage\",\n    value: function createPage() {\n      //const {totalPage} = this.props.pageConfig;\n      var _this$state = this.state,\n          currentPage = _this$state.currentPage,\n          groupCount = _this$state.groupCount,\n          startPage = _this$state.startPage,\n          totalPage = _this$state.totalPage;\n      var pages = []; //上一页\n\n      pages.push(React.createElement(\"li\", {\n        className: currentPage === 1 ? \"nomore\" : null,\n        onClick: this.prePageHandeler.bind(this),\n        key: 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"\\u4E0A\\u4E00\\u9875\"));\n\n      if (totalPage <= 10) {\n        /*总页码小于等于10时，全部显示出来*/\n        for (var i = 1; i <= totalPage; i++) {\n          pages.push(React.createElement(\"li\", {\n            key: i,\n            onClick: this.pageClick.bind(this, i),\n            className: currentPage === i ? \"activePage\" : null,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38\n            },\n            __self: this\n          }, i));\n        }\n      } else {\n        /*总页码大于10时，部分显示*/\n        //第一页\n        pages.push(React.createElement(\"li\", {\n          className: currentPage === 1 ? \"activePage\" : null,\n          key: 1,\n          onClick: this.pageClick.bind(this, 1),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, \"1\"));\n        var pageLength = 0;\n\n        if (groupCount + startPage > totalPage) {\n          pageLength = totalPage;\n        } else {\n          pageLength = groupCount + startPage;\n        } //前面省略号(当当前页码比分组的页码大时显示省略号)\n\n\n        if (currentPage >= groupCount) {\n          pages.push(React.createElement(\"li\", {\n            className: \"\",\n            key: -1,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }, \"\\xB7\\xB7\\xB7\"));\n        } //非第一页和最后一页显示\n\n\n        for (var _i = startPage; _i < pageLength; _i++) {\n          if (_i <= totalPage - 1 && _i > 1) {\n            pages.push(React.createElement(\"li\", {\n              className: currentPage === _i ? \"activePage\" : null,\n              key: _i,\n              onClick: this.pageClick.bind(this, _i),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 61\n              },\n              __self: this\n            }, _i));\n          }\n        } //后面省略号\n\n\n        if (totalPage - startPage >= groupCount + 1) {\n          pages.push(React.createElement(\"li\", {\n            className: \"\",\n            key: -2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67\n            },\n            __self: this\n          }, \"\\xB7\\xB7\\xB7\"));\n        } //最后一页\n\n\n        pages.push(React.createElement(\"li\", {\n          className: currentPage === totalPage ? \"activePage\" : null,\n          key: totalPage,\n          onClick: this.pageClick.bind(this, totalPage),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, totalPage));\n      } //下一页\n\n\n      pages.push(React.createElement(\"li\", {\n        className: currentPage === totalPage ? \"nomore\" : null,\n        onClick: this.nextPageHandeler.bind(this),\n        key: totalPage + 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"\\u4E0B\\u4E00\\u9875\"));\n      return pages;\n    } //页码点击\n\n  }, {\n    key: \"pageClick\",\n    value: function pageClick(currentPage) {\n      var groupCount = this.state.groupCount;\n      var getCurrentPage = this.props.pageCallbackFn; //当 当前页码 大于 分组的页码 时，使 当前页 前面 显示 两个页码\n\n      if (currentPage >= groupCount) {\n        this.setState({\n          startPage: currentPage - 2\n        });\n      }\n\n      if (currentPage < groupCount) {\n        this.setState({\n          startPage: 1\n        });\n      } //第一页时重新设置分组的起始页\n\n\n      if (currentPage === 1) {\n        this.setState({\n          startPage: 1\n        });\n      }\n\n      this.setState({\n        currentPage: currentPage\n      }); //将当前页码返回父组件\n\n      getCurrentPage(currentPage);\n    } //上一页事件\n\n  }, {\n    key: \"prePageHandeler\",\n    value: function prePageHandeler() {\n      var currentPage = this.state.currentPage;\n\n      if (--currentPage === 0) {\n        return false;\n      }\n\n      this.pageClick(currentPage);\n    } //下一页事件\n\n  }, {\n    key: \"nextPageHandeler\",\n    value: function nextPageHandeler() {\n      var _this$state2 = this.state,\n          currentPage = _this$state2.currentPage,\n          totalPage = _this$state2.totalPage; // const {totalPage} = this.props.pageConfig;\n\n      if (++currentPage > totalPage) {\n        return false;\n      }\n\n      this.pageClick(currentPage);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var pageList = this.createPage();\n      return React.createElement(\"ul\", {\n        className: \"page-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, pageList);\n    }\n  }]);\n\n  return Pagecomponent;\n}(Component);\n\nexport default Pagecomponent;","map":{"version":3,"sources":["D:\\work\\vscode-workspace\\zy-home\\src\\zyhome\\page\\components\\Pagecomponent.js"],"names":["React","Component","Pagecomponent","props","state","currentPage","groupCount","startPage","totalPage","createPage","bind","setState","pageConfig","pageCallbackFn","pages","push","prePageHandeler","i","pageClick","pageLength","nextPageHandeler","getCurrentPage","pageList"],"mappings":"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","sourcesContent":["/**\n * Created By brand On 2018/2/2\n */\nimport React, {Component} from 'react'\nimport './Pagecomponent.css'\n\nclass Pagecomponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentPage: 1, //当前页码\n            groupCount: 5, //页码分组，显示7个页码，其余用省略号显示\n            startPage: 1,  //分组开始页码\n            totalPage:1 //总页数\n        }\n        this.createPage = this.createPage.bind(this)\n    }\n\n    componentDidMount() {\n        this.setState({\n            totalPage: this.props.pageConfig.totalPage\n        })\n        this.props.pageCallbackFn(this.state.currentPage)\n    }\n\n    createPage() {\n        //const {totalPage} = this.props.pageConfig;\n        const {currentPage, groupCount, startPage,totalPage} = this.state;\n        let pages = []\n        //上一页\n        pages.push(<li className={currentPage === 1 ? \"nomore\" : null} onClick={this.prePageHandeler.bind(this)}\n                       key={0}>\n            上一页</li>)\n\n        if (totalPage <= 10) {\n            /*总页码小于等于10时，全部显示出来*/\n            for (let i = 1; i <= totalPage; i++) {\n                pages.push(<li key={i} onClick={this.pageClick.bind(this, i)}\n                               className={currentPage === i ? \"activePage\" : null}>{i}</li>)\n            }\n        } else {\n            /*总页码大于10时，部分显示*/\n\n            //第一页\n            pages.push(<li className={currentPage === 1 ? \"activePage\" : null} key={1}\n                           onClick={this.pageClick.bind(this, 1)}>1</li>)\n\n            let pageLength = 0;\n            if (groupCount + startPage > totalPage) {\n                pageLength = totalPage\n            } else {\n                pageLength = groupCount + startPage;\n            }\n            //前面省略号(当当前页码比分组的页码大时显示省略号)\n            if (currentPage >= groupCount) {\n                pages.push(<li className=\"\" key={-1}>···</li>)\n            }\n            //非第一页和最后一页显示\n            for (let i = startPage; i < pageLength; i++) {\n                if (i <= totalPage - 1 && i > 1) {\n                    pages.push(<li className={currentPage === i ? \"activePage\" : null} key={i}\n                                   onClick={this.pageClick.bind(this, i)}>{i}</li>)\n                }\n            }\n            //后面省略号\n            if (totalPage - startPage >= groupCount + 1) {\n                pages.push(<li className=\"\" key={-2}>···</li>)\n            }\n            //最后一页\n            pages.push(<li className={currentPage === totalPage ? \"activePage\" : null} key={totalPage}\n                           onClick={this.pageClick.bind(this, totalPage)}>{totalPage}</li>)\n        }\n        //下一页\n        pages.push(<li className={currentPage === totalPage ? \"nomore\" : null}\n                       onClick={this.nextPageHandeler.bind(this)}\n                       key={totalPage + 1}>下一页</li>)\n        return pages;\n\n    }\n\n    //页码点击\n    pageClick(currentPage) {\n        const {groupCount} = this.state\n        const getCurrentPage = this.props.pageCallbackFn;\n        //当 当前页码 大于 分组的页码 时，使 当前页 前面 显示 两个页码\n        if (currentPage >= groupCount) {\n            this.setState({\n                startPage: currentPage - 2,\n            })\n        }\n        if (currentPage < groupCount) {\n            this.setState({\n                startPage: 1,\n            })\n        }\n        //第一页时重新设置分组的起始页\n        if (currentPage === 1) {\n            this.setState({\n                startPage: 1,\n            })\n        }\n        this.setState({\n            currentPage\n        })\n        //将当前页码返回父组件\n        getCurrentPage(currentPage)\n    }\n\n    //上一页事件\n    prePageHandeler() {\n        let {currentPage} = this.state\n        if (--currentPage === 0) {\n            return false\n        }\n        this.pageClick(currentPage)\n    }\n\n    //下一页事件\n    nextPageHandeler() {\n        let {currentPage,totalPage} = this.state\n       // const {totalPage} = this.props.pageConfig;\n        if (++currentPage > totalPage) {\n            return false\n        }\n        this.pageClick(currentPage)\n    }\n    render() {\n        const pageList = this.createPage();\n        return (\n            <ul className=\"page-container\">\n                {pageList}\n            </ul>\n        )\n    }\n}\n\nexport default Pagecomponent"]},"metadata":{},"sourceType":"module"}